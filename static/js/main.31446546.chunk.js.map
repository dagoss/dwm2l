{"version":3,"sources":["models/Models.ts","models/Library.ts","components/MonsterImage.tsx","components/RecipeListItem.tsx","components/GenericComponents.tsx","components/RecipeList.tsx","components/ResponsiveComponents.tsx","components/StatsComponent.tsx","components/LocationsComponent.tsx","components/SkillsComponent.tsx","components/MonsterCard.tsx","components/MonsterList.tsx","components/FamilyList.tsx","app/MainScreen.tsx","app/MonsterScreen.tsx","app/ScrollToTop.tsx","app/AppBar.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Family","RecruitLocation","Requirement","RecipeComponentType","Monsters","library","monsters","this","data","monster","find","x","name","toString","toLowerCase","isMonster","object","JSON","stringify","includes","isFamily","Image","styled","img","MonsterImage","isPsx","history","useHistory","alt","src","onClick","push","RecipeRow","div","RecipeListItem","recipe","as","Result","part","base","mate","result","RecipeComponent","BorderedContainer","RecipeList","recipes","items","forEach","Row","Column","props","span","Container","StatBar","stat","StatDisplay","StatsComponent","maxLevel","experience","hp","mp","attack","defence","agility","intelligence","LocationsComponent","locations","length","taraLocations","cobiLocations","join","SkillsComponent","skills","map","MonsterCard","family","asBase","Base","asMate","Mate","List","ul","MonsterList","Wrapper","Card","Name","FamilyList","simplified","values","sort","a","b","order","Object","indexOf","MainScreen","keys","MonsterScreen","mon","undefined","match","params","get","withRouter","children","useEffect","unlisten","listen","window","scrollTo","Bar","AppBar","style","height","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ipmRAoCYA,EAcAC,EAYAC,EAMAC,EAMAC,E,8FC3DCC,EAAmB,IAZhC,WAGE,aAAe,yBAFfC,SAAuB,GAGrBC,KAAKD,SAAWE,EAAKF,SAJzB,gDAOMG,GACF,OAAOF,KAAKD,SAASI,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,WAAWC,gBAAkBL,EAAQI,WAAWC,qBAR1F,MDyBO,SAASC,EAAUC,GACxB,OAGK,SAAkBA,GACvB,OAAOC,KAAKC,UAAUF,GAAQG,SAAS,UAJ/BC,CAASJ,I,SAOPhB,K,0BAAAA,E,4BAAAA,E,0BAAAA,E,wBAAAA,E,0BAAAA,E,sBAAAA,E,0BAAAA,E,4BAAAA,E,gCAAAA,E,0BAAAA,E,yBAAAA,M,cAcAC,O,iBAAAA,I,mBAAAA,I,aAAAA,I,aAAAA,I,iBAAAA,I,uBAAAA,I,aAAAA,I,mBAAAA,I,kCAAAA,M,cAYAC,O,uBAAAA,I,qBAAAA,I,gBAAAA,M,cAMAC,K,mBAAAA,E,eAAAA,E,gBAAAA,M,cAMAC,O,yBAAAA,I,yBAAAA,I,yBAAAA,I,yBAAAA,I,mBAAAA,I,yBAAAA,I,mBAAAA,I,uBAAAA,I,uBAAAA,I,iBAAAA,I,oBAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,sBAAAA,I,0BAAAA,I,oBAAAA,I,wBAAAA,I,wBAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,wBAAAA,I,oBAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,wBAAAA,I,oBAAAA,I,oBAAAA,I,wBAAAA,I,0BAAAA,I,sBAAAA,I,0BAAAA,I,0BAAAA,I,sBAAAA,I,0BAAAA,I,wBAAAA,I,wBAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,oBAAAA,I,oBAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,sBAAAA,I,0BAAAA,I,0BAAAA,I,sBAAAA,I,oBAAAA,I,0BAAAA,I,oBAAAA,I,0BAAAA,I,wBAAAA,I,0BAAAA,I,sBAAAA,I,sBAAAA,I,wBAAAA,I,wBAAAA,I,wBAAAA,I,0BAAAA,I,sBAAAA,I,gBAAAA,I,wBAAAA,I,0BAAAA,I,0BAAAA,I,0BAAAA,I,wBAAAA,I,sBAAAA,I,wBAAAA,I,sBAAAA,I,0BAAAA,I,sBAAAA,I,wBAAAA,I,oBAAAA,I,oBAAAA,I,oBAAAA,I,sBAAAA,I,sBAAAA,I,kBAAAA,I,oBAAAA,I,wBAAAA,I,wBAAAA,I,wBAAAA,I,0BAAAA,I,wBAAAA,I,0BAAAA,I,wBAAAA,I,oBAAAA,I,wBAAAA,I,yBAAAA,I,uBAAAA,I,yBAAAA,I,2BAAAA,I,iBAAAA,I,2BAAAA,I,uBAAAA,I,uBAAAA,I,yBAAAA,I,yBAAAA,I,2BAAAA,I,yBAAAA,I,uBAAAA,I,uBAAAA,I,2BAAAA,I,yBAAAA,I,yBAAAA,I,yBAAAA,I,yBAAAA,I,2BAAAA,I,uBAAAA,I,2BAAAA,I,2BAAAA,I,2BAAAA,I,yBAAAA,I,qBAAAA,I,2BAAAA,I,uBAAAA,I,yBAAAA,I,yBAAAA,I,uBAAAA,I,uBAAAA,I,yBAAAA,I,yBAAAA,I,uBAAAA,I,yBAAAA,I,yBAAAA,I,yBAAAA,I,uBAAAA,I,uBAAAA,I,2BAAAA,I,uBAAAA,I,2BAAAA,I,yBAAAA,I,2BAAAA,I,2BAAAA,I,uBAAAA,I,2BAAAA,I,mBAAAA,I,uBAAAA,I,mBAAAA,I,uBAAAA,I,yBAAAA,I,2BAAAA,I,2BAAAA,I,qBAAAA,I,2BAAAA,I,mBAAAA,I,yBAAAA,I,2BAAAA,I,yBAAAA,I,2BAAAA,I,yBAAAA,I,uBAAAA,I,2BAAAA,I,uBAAAA,I,2BAAAA,I,2BAAAA,I,iBAAAA,I,2BAAAA,I,uBAAAA,I,yBAAAA,I,uBAAAA,I,uBAAAA,I,2BAAAA,I,2BAAAA,I,2BAAAA,I,+BAAAA,I,uBAAAA,I,yBAAAA,I,qBAAAA,I,yBAAAA,I,eAAAA,I,iBAAAA,I,2BAAAA,I,2BAAAA,I,2BAAAA,I,uBAAAA,I,qBAAAA,I,2BAAAA,I,yBAAAA,I,yBAAAA,I,2BAAAA,I,2BAAAA,I,uBAAAA,I,qBAAAA,I,uBAAAA,I,2BAAAA,I,qBAAAA,I,yBAAAA,I,yBAAAA,I,yBAAAA,I,mBAAAA,I,yBAAAA,I,y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","file":"static/js/main.31446546.chunk.js","sourcesContent":["\r\nexport interface IMonster {\r\n  name: Monsters;\r\n  family: Family;\r\n  locations: (RecruitLocation)[];\r\n  recipes: (IRecipe)[];\r\n  asBase: (IRecipe)[];\r\n  asMate: (IRecipe)[];\r\n  cobiLocations: (RecruitLocation)[];\r\n  taraLocations: (RecruitLocation)[];\r\n  skills: String[];\r\n  maxLevel: number;\r\n  experience: number;\r\n  hp: number;\r\n  mp: number;\r\n  attack: number;\r\n  defence: number;\r\n  agility: number;\r\n  intelligence: number;\r\n}\r\n\r\nexport interface IRecipe {\r\n  base: Monsters | Family;\r\n  mate: Monsters | Family;\r\n  result: Monsters;\r\n  req: Requirement | null;\r\n}\r\n\r\nexport function isMonster(object: any): object is Monsters {\r\n  return !isFamily(object);//(object as Monsters) !== undefined;\r\n}\r\n\r\nexport function isFamily(object: any): boolean {\r\n  return JSON.stringify(object).includes('Family');\r\n}\r\n\r\nexport enum Family {\r\n  SlimeFamily='SlimeFamily',\r\n  DragonFamily='DragonFamily',\r\n  BeastFamily='BeastFamily',\r\n  BirdFamily='BirdFamily',\r\n  PlantFamily='PlantFamily',\r\n  BugFamily='BugFamily',\r\n  DemonFamily='DemonFamily',\r\n  ZombieFamily='ZombieFamily',\r\n  MaterialFamily='MaterialFamily',\r\n  WaterFamily='WaterFamily',\r\n  BossFamily='BossFamily'\r\n}\r\n\r\nexport enum RecruitLocation {\r\n  Oasis,\r\n  Pirate,\r\n  Ice,\r\n  Sky,\r\n  Limbo,\r\n  Traveler,\r\n  Elf,\r\n  Lonely,\r\n  ForeignMaster,\r\n}\r\n\r\nexport enum Requirement {\r\n  PlusFive,\r\n  PlusTen,\r\n  Link\r\n}\r\n\r\nexport enum RecipeComponentType {\r\n  Result='as Result',\r\n  Base='as Base',\r\n  Mate='as Mate'\r\n}\r\n\r\nexport enum Monsters {\r\n  // Slime\r\n  DrakSlime,\r\n  SpotSlime,\r\n  WingSlime,\r\n  TreeSlime,\r\n  Snaily,\r\n  SlimeNite,\r\n  Babble,\r\n  BoxSlime,\r\n  Pearlgel,\r\n  Slime,\r\n  Healer,\r\n  FangSlime,\r\n  RockSlime,\r\n  SlimeBorg,\r\n  Slabbit,\r\n  KingSlime,\r\n  Metaly,\r\n  Metabble,\r\n  SpotKing,\r\n  TropicGel,\r\n  MimeSlime,\r\n  HaloSlime,\r\n  MetalKing,\r\n  GoldSlime,\r\n  GranSlime,\r\n  WonderEgg,\r\n\r\n  // Dragon\r\n  DragonKid,\r\n  Tortragon,\r\n  Pteranod,\r\n  Gasgon,\r\n  FairyDrak,\r\n  LizardMan,\r\n  Poisongon,\r\n  Swordgon,\r\n  Drygon,\r\n  Dragon,\r\n  MiniDrak,\r\n  MadDragon,\r\n  RayBurn,\r\n  Chamelgon,\r\n  LizardFly,\r\n  Andreal,\r\n  KingCobra,\r\n  Vampirus,\r\n  SnakeBat,\r\n  Spikerous,\r\n  GreatDrak,\r\n  Crestpent,\r\n  WingSnake,\r\n  Coatol,\r\n  Orochi,\r\n  BattleRex,\r\n  SkyDragon,\r\n  Serpentia,\r\n  Divinegon,\r\n  Orligon,\r\n  GigaDraco,\r\n\r\n  // Beast\r\n  Tonguella,\r\n  Almiraj,\r\n  CatFly,\r\n  PillowRat,\r\n  Saccer,\r\n  GulpBeast,\r\n  Skullroo,\r\n  WindBeast,\r\n  Beavern,\r\n  AntBear,\r\n  SuperTen,\r\n  IronTurt,\r\n  Mommonja,\r\n  HammerMan,\r\n  Grizzly,\r\n  Yeti,\r\n  ArrowDog,\r\n  NoctoKing,\r\n  BeastNite,\r\n  MadGopher,\r\n  FairyRat,\r\n  Unicorn,\r\n  Goategon,\r\n  WildApe,\r\n  Trumpeter,\r\n  KingLeo,\r\n  DarkHorn,\r\n  MadCat,\r\n  BigEye,\r\n  Gorago,\r\n  CatMage,\r\n  Dumbira,\r\n\r\n  // Bird\r\n  Picky,\r\n  Wyvern,\r\n  BullBird,\r\n  FloraJay,\r\n  DuckKite,\r\n  MadPecker,\r\n  MadRaven,\r\n  MistyWing,\r\n  AquaHawk,\r\n  Dracky,\r\n  KiteHawk,\r\n  StubBird,\r\n  LandOwl,\r\n  MadGoose,\r\n  MadCondor,\r\n  Emyu,\r\n  Blizzardy,\r\n  Phoenix,\r\n  ZapBird,\r\n  Garudian,\r\n  WhipBird,\r\n  FunkyBird,\r\n  RainHawk,\r\n  Azurile,\r\n  Shantak,\r\n  CragDevil,\r\n\r\n  // Plant\r\n  MadPlant,\r\n  FireWeed,\r\n  FloraMan,\r\n  WingTree,\r\n  Cactiball,\r\n  Gulpple,\r\n  ToadStool,\r\n  AmberWeed,\r\n  Slurperon,\r\n  Stubsuck,\r\n  Oniono,\r\n  DanceVegi,\r\n  TreeBoy,\r\n  Devipine,\r\n  FaceTree,\r\n  HerbMan,\r\n  BeanMan,\r\n  EvilSeed,\r\n  ManEater,\r\n  Snapper,\r\n  GhosTree,\r\n  RoseVine,\r\n  Egdracil,\r\n  Warubou,\r\n  Watabou,\r\n  Eggplaton,\r\n  FooHero,\r\n\r\n  // Bug\r\n  GiantSlug,\r\n  Catapila,\r\n  Gophecada,\r\n  ButterFly,\r\n  WeedBug,\r\n  GiantWorm,\r\n  Lipsy,\r\n  StagBug,\r\n  Pyuro,\r\n  ArmyAnt,\r\n  GoHopper,\r\n  TailEater,\r\n  ArmorPede,\r\n  Eyeder,\r\n  GiantMoth,\r\n  Droll,\r\n  ArmyCrab,\r\n  MadHornet,\r\n  Belzebub,\r\n  WarMantis,\r\n  HornBeet,\r\n  Sickler,\r\n  Armorpion,\r\n  Digster,\r\n  Skularach,\r\n  MultiEyes,\r\n\r\n  // Demon\r\n  Pixy,\r\n  MedusaEye,\r\n  AgDevil,\r\n  Demonite,\r\n  DarkEye,\r\n  EyeBall,\r\n  SkulRider,\r\n  EvilBeast,\r\n  Bubblemon,\r\n  OneEyeClown,\r\n  Gremlin,\r\n  ArcDemon,\r\n  Lionex,\r\n  GoatHorn,\r\n  Orc,\r\n  Ogre,\r\n  GateGuard,\r\n  ChopClown,\r\n  BossTroll,\r\n  Grendal,\r\n  Akubar,\r\n  MadKnight,\r\n  EvilWell,\r\n  Gigantes,\r\n  Centasaur,\r\n  EvilArmor,\r\n  Jamirus,\r\n  Durran,\r\n  Titanis,\r\n  LampGenie,\r\n\r\n  // Zombie\r\n  Spooky,\r\n  Skullgon,\r\n  Putrepup,\r\n  RotRaven,\r\n  Mummy,\r\n  DarkCrab,\r\n  DeadNite,\r\n  Shadow,\r\n  Skulpent,\r\n  Hork,\r\n  Mudron,\r\n  NiteWhip,\r\n  WindMerge,\r\n  Reaper,\r\n  Inverzon,\r\n  FoxFire,\r\n  CaptDead,\r\n  DeadNoble,\r\n  WhiteKing,\r\n  BoneSlave,\r\n  Skeletor,\r\n  Servant,\r\n  Lazamanus,\r\n  Copycat,\r\n  MadSpirit,\r\n  PomPomBom,\r\n  Niterich,\r\n\r\n  // Material\r\n  JewelBag,\r\n  EvilWand,\r\n  MadCandle,\r\n  CoilBird,\r\n  Facer,\r\n  SpikyBoy,\r\n  MadMirror,\r\n  RogueNite,\r\n  Puppetor,\r\n  Goopi,\r\n  Voodoll,\r\n  MetalDrak,\r\n  Balzak,\r\n  SabreMan,\r\n  CurseLamp,\r\n  Brushead,\r\n  Roboster,\r\n  Roboster2,\r\n  EvilPot,\r\n  Gismo,\r\n  LavaMan,\r\n  IceMan,\r\n  Mimic,\r\n  Exaucers,\r\n  MudDoll,\r\n  Golem,\r\n  StoneMan,\r\n  BombCrag,\r\n  GoldGolem,\r\n  DarkMate,\r\n  ProtoMech,\r\n  CloudKing,\r\n\r\n  // Water\r\n  Petiteel,\r\n  Moray,\r\n  WalrusMan,\r\n  RayGigas,\r\n  Anemon,\r\n  Aquarella,\r\n  Merman,\r\n  Octokid,\r\n  PutreFish,\r\n  Octoreach,\r\n  Angleron,\r\n  FishRider,\r\n  RushFish,\r\n  Gamanian,\r\n  Clawster,\r\n  CancerMan,\r\n  RogueWave,\r\n  Scallopa,\r\n  SeaHorse,\r\n  HoodSquid,\r\n  MerTiger,\r\n  AxeShark,\r\n  Octogon,\r\n  KingSquid,\r\n  Digong,\r\n  WhaleMage,\r\n  Aquadon,\r\n  Octoraid,\r\n  Grakos,\r\n  Poseidon,\r\n  Pumpoise,\r\n  StarFish,\r\n\r\n  // Boss\r\n  DracoLord1,\r\n  DracoLord2,\r\n  LordDraco,\r\n  Hargon,\r\n  Sidoh,\r\n  GenoSidoh,\r\n  Baramos,\r\n  Zoma,\r\n  AsuraZoma,\r\n  Pizzaro,\r\n  PsychoPiz,\r\n  Esterk,\r\n  Mirudraas1,\r\n  Mirudraas2,\r\n  Mudou,\r\n  DeathMore1,\r\n  DeathMore2,\r\n  DeathMore3,\r\n  DarkDrium,\r\n  Orgodemir,\r\n  Orgodemir2,\r\n  Darck\r\n}\r\n\r\n","\r\nimport { IMonster, Monsters } from './Models';\r\nimport data from './Monsters.json';\r\nexport class Library {\r\n  monsters: IMonster[] = [];\r\n\r\n  constructor() {\r\n    this.monsters = data.monsters as unknown as IMonster[];\r\n  }\r\n\r\n  get(monster: Monsters | string): IMonster {\r\n    return this.monsters.find(x => x.name.toString().toLowerCase() === monster.toString().toLowerCase())!;\r\n  }\r\n}\r\n\r\nexport const library: Library = new Library();","import { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { Monsters } from \"../models/Models\";\r\n\r\nconst Image = styled.img`\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\ntype MonsterImageProps = {\r\n  monster: Monsters;\r\n  isPsx?: boolean;\r\n}\r\n\r\nexport const MonsterImage = ({monster, isPsx=true}: MonsterImageProps) => {\r\n  \r\n  let history = useHistory();\r\n  return (\r\n    <div>\r\n      <Image alt={monster.toString()} src={`/dwm2l/assets/${isPsx ? 'psx' : 'gbc'}/${monster.toString().toLowerCase()}.${isPsx ? 'gif' : 'png'}`}\r\n        onClick={() => history.push(`/monster/${monster.toString()}`)}\r\n      />\r\n    </div>\r\n  )\r\n};","import styled from \"styled-components\";\r\nimport { Family, IRecipe, isMonster, Monsters, RecipeComponentType } from \"../models/Models\";\r\nimport { MonsterImage } from \"./MonsterImage\";\r\n\r\nconst RecipeRow = styled.div`\r\n  * {\r\n    display:inline-block;\r\n  }\r\n`\r\n\r\ninterface RecipeListItemProps {\r\n  recipe: IRecipe;\r\n  as: RecipeComponentType;\r\n}\r\n\r\nexport const RecipeListItem = ({recipe, as}: RecipeListItemProps) => (\r\n  \r\n  <div>\r\n    {as === RecipeComponentType.Result ?\r\n      <RecipeRow>\r\n        <RecipeComponent part={recipe.base}/> + <RecipeComponent part={recipe.mate}/>\r\n      </RecipeRow>\r\n    : \r\n      <RecipeRow>\r\n        <RecipeComponent part={recipe.base}/> + <RecipeComponent part={recipe.mate}/> = <RecipeComponent part={recipe.result} />\r\n      </RecipeRow>\r\n    }\r\n    \r\n  </div>\r\n);\r\n\r\ninterface RecipeComponentProps {\r\n  part: Monsters | Family;\r\n}\r\n\r\nexport const RecipeComponent = ({part}: RecipeComponentProps) => {\r\n  if (isMonster(part)) {\r\n    const monster = part as Monsters;\r\n    return <MonsterImage monster={monster}/>\r\n  } else {\r\n    return <div>{part}</div>\r\n  }\r\n};","import styled from \"styled-components\";\r\n\r\n\r\nexport const BorderedContainer = styled.div`\r\n  border-radius: 4px;\r\n  border-color: black;\r\n  border-style: solid;\r\n  margin: 5px;\r\n`","\r\nimport styled from \"styled-components\";\r\nimport { IRecipe, RecipeComponentType } from \"../models/Models\";\r\nimport { RecipeListItem } from './RecipeListItem';\r\nimport { BorderedContainer } from './GenericComponents';\r\n\r\n\r\ninterface RecipeListProps {\r\n  recipes: IRecipe[];\r\n  as: RecipeComponentType;\r\n}\r\nexport const RecipeList = ({recipes, as}: RecipeListProps) => {\r\n  const items: any = [];\r\n  recipes.forEach(x => items.push(\r\n    <RecipeListItem recipe={x} as={as}/>\r\n  ));\r\n\r\n  return (\r\n    <BorderedContainer>\r\n      <h3>{as}</h3>\r\n      <ul>\r\n        {items}\r\n      </ul>\r\n    </BorderedContainer>\r\n  );  \r\n}","import styled from \"styled-components\";\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nexport const Row = styled.div`\r\n  &::after {\r\n    content: \"\";\r\n    clear: both;\r\n    display: table;\r\n  }\r\n`\r\n\r\nexport const Column = styled.div<{span: number}>`\r\n  float: left;\r\n  width: 100%;\r\n  // padding: 15px;\r\n  @media only screen and (min-width: 768px) {\r\n    width: ${props => (props.span ? props.span / 12 * 100 : 8.33)}%;\r\n  }\r\n`\r\n\r\nexport const Mobile = ({ children }: any) => {\r\n  const isMobile = useMediaQuery({ maxWidth: 767 })\r\n  return isMobile ? children : null\r\n}\r\nexport const Default = ({ children }: any) => {\r\n  const isNotMobile = useMediaQuery({ minWidth: 768 })\r\n  return isNotMobile ? children : null\r\n}","import { IMonster } from \"../models/Models\";\r\nimport styled from 'styled-components';\r\nimport { BorderedContainer } from './GenericComponents';\r\n\r\ninterface StatsComponentProps {\r\n  monster: IMonster,\r\n}\r\n\r\nconst Container = styled.div`\r\n  text-align: left;\r\n  justify-content: left;\r\n  display: block-inline;\r\n`\r\n\r\ninterface StatsProps {\r\n  name: String,\r\n  stat: number,\r\n}\r\n\r\nconst StatBar = styled.div<{stat: number}>`\r\n  display: inline-block;\r\n  width: ${props => (props.stat/31)*100}%;\r\n  background-color: ${props => {\r\n    if (props.stat > 28) {\r\n      return '#FF5722'\r\n    }\r\n    else if (props.stat > 20) {\r\n      return '#FB8C00'\r\n    }\r\n    else if (props.stat > 10) {\r\n      return '#FDD835'\r\n    }\r\n    else if (props.stat > 5) {\r\n      return '#7CB342'\r\n    }\r\n    else {\r\n      return '#388E3C';\r\n    }\r\n  }};\r\n  text-align: left;\r\n`\r\n\r\n// const StatName = styled.div`\r\n//   width: 75px;\r\n//   display: inline-block;\r\n// `\r\n\r\nconst StatDisplay = ({name, stat}: StatsProps) => (\r\n  <div>\r\n    <Container>\r\n      {/* <StatName>{name}:</StatName> */}\r\n      <StatBar stat={stat}>\r\n        {name}: {stat}\r\n      </StatBar>\r\n    </Container>\r\n  </div>\r\n)\r\n\r\n//for stats, 0 is poor, 15 is average, and 31 is good\r\n// except for exp in which case 0 is good, 15 is average and 31 is bad\r\n\r\nexport const StatsComponent = ({monster}: StatsComponentProps) => (\r\n  <BorderedContainer>\r\n    <div>MaxLevel: {monster.maxLevel}</div>\r\n    <StatDisplay name='Experience' stat={31-monster.experience} />\r\n    <StatDisplay name='HP' stat={monster.hp} />\r\n    <StatDisplay name='MP' stat={monster.mp} />\r\n    <StatDisplay name='Attack' stat={monster.attack} />\r\n    <StatDisplay name='Defence' stat={monster.defence} />\r\n    <StatDisplay name='Agility' stat={monster.agility} />\r\n    <StatDisplay name='Intelligence' stat={monster.intelligence} />\r\n  </BorderedContainer>\r\n)","import { IMonster } from \"../models/Models\";\r\nimport { BorderedContainer } from './GenericComponents';\r\n\r\ninterface LocationProps {\r\n  monster: IMonster,\r\n}\r\n\r\nexport const LocationsComponent = ({monster}: LocationProps) => (\r\n  <BorderedContainer>\r\n    <h2>Locations</h2>\r\n    {monster.locations.length == 0 && monster.taraLocations.length == 0 && monster.cobiLocations.length == 0 &&\r\n      <p>Not found in any of the story key worlds</p>\r\n    }\r\n    {monster.locations.length > 0 && <p>Both versions: {monster.locations.join(', ')}</p>}\r\n    {monster.taraLocations.length > 0 && <p>Tara Only: {monster.taraLocations.join(', ')}</p>}\r\n    {monster.cobiLocations.length > 0 && <p>Cobi Only: {monster.cobiLocations.join(', ')}</p>}\r\n  </BorderedContainer>\r\n)","import { IMonster } from \"../models/Models\";\r\nimport { BorderedContainer } from './GenericComponents';\r\n\r\ninterface SkillsProps {\r\n  monster: IMonster,\r\n}\r\n\r\nexport const SkillsComponent = ({monster}: SkillsProps) => (\r\n  <BorderedContainer>\r\n    <h2>Skills</h2>\r\n    {monster.skills.map(x => (\r\n      <p>{x}</p>\r\n    ))}\r\n  </BorderedContainer>\r\n)","import React from 'react';\r\nimport { IMonster, RecipeComponentType } from '../models/Models';\r\nimport styled from 'styled-components';\r\nimport { MonsterImage } from './MonsterImage';\r\nimport { RecipeList } from './RecipeList';\r\nimport { Row, Column } from './ResponsiveComponents';\r\nimport { StatsComponent } from './StatsComponent';\r\nimport { LocationsComponent } from './LocationsComponent';\r\nimport { SkillsComponent } from './SkillsComponent';\r\n\r\nconst Container = styled.div`\r\n  text-align: center;\r\n  justify-content: center;\r\n`\r\n\r\ninterface MonsterCardProps {\r\n  monster: IMonster,\r\n}\r\n\r\n\r\n\r\nexport const MonsterCard = ({monster}: MonsterCardProps) => (\r\n  <Container>\r\n    <h1>{monster.name} - {monster.family}</h1>\r\n    <MonsterImage monster={monster.name} />\r\n    <StatsComponent monster={monster} />\r\n    <LocationsComponent monster={monster} />\r\n    <SkillsComponent monster={monster} />\r\n    <Row>\r\n      <Column span={4}>\r\n        <RecipeList recipes={monster.recipes} as={RecipeComponentType.Result}/>\r\n      </Column>\r\n      <Column span={4}>\r\n        <RecipeList recipes={monster.asBase} as={RecipeComponentType.Base}/>\r\n      </Column>\r\n      <Column span={4}>\r\n        <RecipeList recipes={monster.asMate} as={RecipeComponentType.Mate}/>\r\n      </Column>\r\n    </Row>\r\n  </Container>\r\n);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { IMonster } from '../models/Models';\r\nimport { MonsterCard } from './MonsterCard';\r\n\r\nconst List = styled.ul`\r\n  list-style-type: none;\r\n  padding: 0px;\r\n  margin: 10px;\r\n  padding-left: 0;\r\n`\r\n\r\ninterface MonsterListProps {\r\n  monsters: IMonster[];\r\n}\r\n\r\nexport const MonsterList = ({monsters} : MonsterListProps) => {\r\n  const items: any = [];\r\n  monsters.forEach(x => items.push(\r\n    <MonsterCard monster={x} />\r\n  ))\r\n\r\n  return (\r\n    <List>\r\n      {items}\r\n    </List>\r\n  );\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { library } from '../models/Library';\r\nimport { Family, IMonster, Monsters } from '../models/Models';\r\nimport { MonsterImage } from './MonsterImage';\r\nimport { MonsterList } from './MonsterList';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  gap: 10px;\r\n\r\n  @media only screen and (min-width: 768px) {\r\n    grid-template-columns: repeat(5, 1fr);\r\n  }\r\n`\r\n\r\nconst Card = styled.div`\r\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n  transition: 0.3s;\r\n\r\n  :hover {\r\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);\r\n  }\r\n\r\n  padding: 5px;\r\n  min-width: 75px;\r\n  min-height: 125px;\r\n  position:relative;\r\n  text-align: center;\r\n  display:flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Name = styled.div`\r\n  position:absolute;\r\n  bottom:0;\r\n`\r\n\r\ninterface FamilyListProps {\r\n  family: Family;\r\n  simplified?: boolean;\r\n}\r\n\r\nexport const FamilyList = ({family, simplified}: FamilyListProps) => {\r\n  let items: IMonster[] = [];\r\n  for (let x of library.monsters.values()) {\r\n    if (x.family === family) {\r\n      items.push(x);\r\n    }\r\n  }\r\n\r\n  items = items.sort((a, b) => {\r\n    const order = Object.values(Monsters);\r\n    return order.indexOf(a.name) - order.indexOf(b.name);\r\n  });\r\n\r\n  let history = useHistory();\r\n\r\n  if (simplified) {\r\n    return (\r\n      <Wrapper>\r\n        {items.map(x => (\r\n          <Card onClick={() => history.push(`/monster/${x.name}`)}>\r\n            <MonsterImage monster={x.name} />\r\n            <Name>{x.name}</Name>\r\n          </Card>\r\n        ))}\r\n      </Wrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{family}</h1>\r\n      <MonsterList monsters={items} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FamilyList;","import React from 'react';\r\nimport { FamilyList } from '../components/FamilyList';\r\nimport { Family } from '../models/Models';\r\n\r\n\r\nexport const MainScreen= () => {\r\n  return (\r\n    <div>\r\n      {Object.keys(Family).map(x => (\r\n        <FamilyList family={x as Family} simplified/>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { MonsterCard } from '../components/MonsterCard';\r\nimport { library } from '../models/Library';\r\nimport { Monsters } from '../models/Models';\r\n\r\ninterface MonsterScreenProps {\r\n  monster: Monsters;\r\n}\r\n\r\nexport const MonsterScreen = (props: MonsterScreenProps | any) => {\r\n  let mon = props.monster;\r\n  if (mon === undefined) {\r\n    mon = props.match.params.monster;\r\n  }\r\n  let monster = library.get(mon);\r\n  \r\n  return (\r\n    <MonsterCard monster={monster} />\r\n  );\r\n}\r\n","import React, { useEffect, Fragment } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction ScrollToTop({ history, children } : any) {\r\n  useEffect(() => {\r\n    const unlisten = history.listen(() => {\r\n      window.scrollTo(0, 0);\r\n    });\r\n    return () => {\r\n      unlisten();\r\n    }\r\n  }, []);\r\n\r\n  return <Fragment>{children}</Fragment>;\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst Bar = styled.div`\r\n  position: fixed;\r\n  z-index: 2;\r\n  background-color: black;\r\n  color: white;\r\n  width: 100%;\r\n  top: 0;\r\n  height: 40px;\r\n  text-align: center;\r\n`\r\n\r\nexport const AppBar = () => {\r\n  let history = useHistory();\r\n  return (\r\n    <div>\r\n      <Bar onClick={() => history.push(`/`)}>\r\n        Back to Home screen\r\n      </Bar>\r\n      <div style={{height: '40px'}}/>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport { MainScreen } from './MainScreen';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { MonsterScreen } from './MonsterScreen';\nimport ScrollToTop from './ScrollToTop';\nimport { AppBar } from './AppBar';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <ScrollToTop />\n        <AppBar />\n        <Switch>\n          <Route path='/monster/:monster' component={MonsterScreen} />\n          <Route path=\"/\" component={MainScreen} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}